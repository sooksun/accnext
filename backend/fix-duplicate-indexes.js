const { Sequelize } = require('sequelize');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° development
const sequelize = new Sequelize(
  'accnext',    // database name
  'root',       // username
  '',           // password (empty for default XAMPP)
  {
    host: 'localhost',
    dialect: 'mysql',
    logging: false,  // ‡∏õ‡∏¥‡∏î logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    timezone: '+07:00'
  }
);

async function fixDuplicateIndexes() {
  try {
    await sequelize.authenticate();
    console.log('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    console.log('\n=== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Duplicate Indexes ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á invoices ===');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const [indexes] = await sequelize.query(`SHOW INDEX FROM invoices`);
    console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô indexes ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${indexes.length}`);

    // ‡∏´‡∏≤ duplicate doc_no indexes
    const docNoIndexes = indexes.filter(index => 
      index.Key_name.startsWith('doc_no') && index.Key_name !== 'doc_no'
    );

    if (docNoIndexes.length > 0) {
      console.log(`\n‡∏û‡∏ö duplicate doc_no indexes: ${docNoIndexes.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      // ‡∏•‡∏ö duplicate indexes
      for (const index of docNoIndexes) {
        try {
          console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö index: ${index.Key_name}`);
          await sequelize.query(`ALTER TABLE invoices DROP INDEX \`${index.Key_name}\``);
        } catch (error) {
          console.log(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö index ${index.Key_name}: ${error.message}`);
        }
      }
    } else {
      console.log('\n‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö duplicate indexes');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö
    const [finalIndexes] = await sequelize.query(`SHOW INDEX FROM invoices`);
    console.log(`\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô indexes ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${finalIndexes.length}`);
    
    const indexGroups = {};
    finalIndexes.forEach(index => {
      if (!indexGroups[index.Key_name]) {
        indexGroups[index.Key_name] = [];
      }
      indexGroups[index.Key_name].push(index);
    });

    console.log('\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ indexes ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠:');
    Object.keys(indexGroups).forEach(keyName => {
      console.log(`- ${keyName}`);
    });

    console.log('\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç duplicate indexes ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  } finally {
    await sequelize.close();
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  fixDuplicateIndexes();
}

module.exports = fixDuplicateIndexes;