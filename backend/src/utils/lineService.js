const axios = require('axios');

/**
 * LINE OA Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 */
class LineService {
  constructor() {
    this.channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
    this.channelSecret = process.env.LINE_CHANNEL_SECRET;
    this.baseURL = 'https://api.line.me/v2';
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE
   */
  isConfigured() {
    return this.channelAccessToken && this.channelSecret;
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Group ‡∏´‡∏£‡∏∑‡∏≠ User
   */
  async sendMessage(to, message) {
    if (!this.isConfigured()) {
      console.log('‚ö†Ô∏è  LINE service not configured');
      return false;
    }

    try {
      const response = await axios.post(
        `${this.baseURL}/bot/message/push`,
        {
          to: to,
          messages: [
            {
              type: 'text',
              text: message
            }
          ]
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.channelAccessToken}`
          }
        }
      );

      console.log('‚úÖ LINE message sent successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Error sending LINE message:', error.response?.data || error.message);
      return false;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô 5,000 ‡∏ö‡∏≤‡∏ó
   */
  async sendExpenseAlert(expense, category) {
    const message = `üí∞ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢

üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${expense.description}
üíµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${expense.amount.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${category.name}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(expense.transaction_date).toLocaleDateString('th-TH')}
üè¢ ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢: ${expense.vendor || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‚ö†Ô∏è  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 5,000 ‡∏ö‡∏≤‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`;

    return await this.sendMessage(process.env.LINE_GROUP_ID, message);
  }

  /**
   * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
   */
  async sendDailyReport(summary) {
    const message = `üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô

üìà ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${summary.todayIncome.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
üìâ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${summary.todayExpense.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${(summary.todayIncome - summary.todayExpense).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleDateString('th-TH')}`;

    return await this.sendMessage(process.env.LINE_GROUP_ID, message);
  }

  /**
   * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
   */
  async sendMonthlyReport(summary) {
    const message = `üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°: ${summary.totalIncome.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°: ${summary.totalExpense.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
üìä ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${(summary.totalIncome - summary.totalExpense).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó

üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${new Date().toLocaleDateString('th-TH', { month: 'long', year: 'numeric' })}`;

    return await this.sendMessage(process.env.LINE_GROUP_ID, message);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LINE Bot
   */
  async checkStatus() {
    if (!this.isConfigured()) {
      return { status: 'not_configured', message: 'LINE service not configured' };
    }

    try {
      const response = await axios.get(
        `${this.baseURL}/bot/profile`,
        {
          headers: {
            'Authorization': `Bearer ${this.channelAccessToken}`
          }
        }
      );

      return { 
        status: 'active', 
        message: 'LINE service is working',
        profile: response.data 
      };
    } catch (error) {
      return { 
        status: 'error', 
        message: error.response?.data?.message || error.message 
      };
    }
  }

  /**
   * ‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å LINE
   */
  handleWebhook(body, signature) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
    const crypto = require('crypto');
    const hash = crypto
      .createHmac('SHA256', this.channelSecret)
      .update(JSON.stringify(body))
      .digest('base64');

    if (hash !== signature) {
      throw new Error('Invalid signature');
    }

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• events
    const events = body.events || [];
    
    for (const event of events) {
      if (event.type === 'message' && event.message.type === 'text') {
        this.handleTextMessage(event);
      }
    }

    return { status: 'ok' };
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE
   */
  async handleTextMessage(event) {
    const message = event.message.text.toLowerCase();
    const userId = event.source.userId;

    let response = '';

    switch (message) {
      case '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ':
        response = 'üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô...';
        break;
      case '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ':
        response = 'üìà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô...';
        break;
      case '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠':
        response = `ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:
        
üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`;
        break;
      default:
        response = '‚ùì ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ';
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    await this.sendMessage(userId, response);
  }
}

module.exports = new LineService(); 