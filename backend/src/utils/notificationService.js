const cron = require('node-cron');
const { Expense, Category, User } = require('../models');
const emailService = require('./emailService');
const lineService = require('./lineService');

/**
 * Notification Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
class NotificationService {
  constructor() {
    this.isRunning = false;
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è  Notification service is already running');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.
    cron.schedule('0 9 * * *', async () => {
      console.log('üîî Running daily budget alert check...');
      await this.checkBudgetAlerts();
    });

    // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 8:00 ‡∏ô.
    cron.schedule('0 8 1 * *', async () => {
      console.log('üìä Running monthly report...');
      await this.sendMonthlyReports();
    });

    this.isRunning = true;
    console.log('‚úÖ Notification service started');
  }

  /**
   * ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è  Notification service is not running');
      return;
    }

    cron.getTasks().forEach(task => task.stop());
    this.isRunning = false;
    console.log('üõë Notification service stopped');
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
   */
  async checkBudgetAlerts() {
    try {
      // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const users = await User.findAll({
        where: { is_active: true },
        attributes: ['id', 'first_name', 'last_name', 'email']
      });

      for (const user of users) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ budget_limit
        const expenses = await Expense.findAll({
          where: {
            user_id: user.id,
            budget_limit: { [require('sequelize').Op.not]: null }
          },
          include: [{
            model: Category,
            as: 'category',
            attributes: ['name', 'color']
          }]
        });

        for (const expense of expenses) {
          const currentMonth = new Date().getMonth() + 1;
          const currentYear = new Date().getFullYear();
          
          const monthlyTotal = await Expense.getMonthlyTotal(
            user.id,
            currentYear,
            currentMonth
          );

          if (monthlyTotal > expense.budget_limit) {
            // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            await emailService.sendBudgetExceededAlert({
              categoryName: expense.category.name,
              budgetLimit: expense.budget_limit,
              actualSpent: monthlyTotal,
              exceeded: monthlyTotal - expense.budget_limit
            });

            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
            if (lineService.isConfigured()) {
              await lineService.sendMessage(process.env.LINE_GROUP_ID, 
                `‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏Å‡∏¥‡∏ô
                
üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${expense.category.name}
üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${expense.budget_limit.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
üí∏ ‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á: ${monthlyTotal.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
üìà ‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö: ${(monthlyTotal - expense.budget_limit).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢`);
            }

            console.log(`üìß Budget alert sent to ${user.email} for category: ${expense.category.name}`);
          }
        }
      }

      console.log('‚úÖ Daily budget alert check completed');
    } catch (error) {
      console.error('‚ùå Error in budget alert check:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
   */
  async sendMonthlyReports() {
    try {
      const users = await User.findAll({
        where: { is_active: true },
        attributes: ['id', 'first_name', 'last_name', 'email']
      });

      const currentDate = new Date();
      const month = currentDate.getMonth() + 1;
      const year = currentDate.getFullYear();

      for (const user of users) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        const monthlyIncome = await require('../models').Income.getMonthlyTotal(
          user.id,
          year,
          month
        );

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        const monthlyExpense = await Expense.getMonthlyTotal(
          user.id,
          year,
          month
        );

        const netProfit = monthlyIncome - monthlyExpense;

        // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        await emailService.sendMonthlyReport({
          month: month,
          year: year,
          totalIncome: monthlyIncome,
          totalExpense: monthlyExpense,
          netProfit: netProfit
        });

        console.log(`üìä Monthly report sent to ${user.email}`);
      }

      console.log('‚úÖ Monthly reports sent');
    } catch (error) {
      console.error('‚ùå Error sending monthly reports:', error);
    }
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
   */
  async testEmail() {
    try {
      const result = await emailService.testEmail();
      if (result) {
        console.log('‚úÖ Test email sent successfully');
      } else {
        console.log('‚ùå Failed to send test email');
      }
    } catch (error) {
      console.error('‚ùå Error sending test email:', error);
    }
  }
}

module.exports = new NotificationService(); 