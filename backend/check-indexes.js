const { Sequelize } = require('sequelize');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° development
const sequelize = new Sequelize(
  'accnext',    // database name
  'root',       // username
  '',           // password (empty for default XAMPP)
  {
    host: 'localhost',
    dialect: 'mysql',
    logging: false,  // ‡∏õ‡∏¥‡∏î logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    timezone: '+07:00'
  }
);

async function checkIndexes() {
  try {
    await sequelize.authenticate();
    console.log('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á invoices
    console.log('\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Indexes ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á invoices ===');
    const [indexes] = await sequelize.query(`
      SHOW INDEX FROM invoices
    `);

    console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô indexes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${indexes.length}`);
    console.log('\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ indexes:');
    
    // ‡πÅ‡∏™‡∏î‡∏á indexes ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° key_name
    const indexGroups = {};
    indexes.forEach(index => {
      if (!indexGroups[index.Key_name]) {
        indexGroups[index.Key_name] = [];
      }
      indexGroups[index.Key_name].push(index);
    });

    Object.keys(indexGroups).forEach(keyName => {
      const group = indexGroups[keyName];
      console.log(`\n${keyName}:`);
      group.forEach(index => {
        console.log(`  - Column: ${index.Column_name}, Unique: ${index.Non_unique === 0 ? 'Yes' : 'No'}, Type: ${index.Index_type}`);
      });
    });

    console.log(`\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô index groups: ${Object.keys(indexGroups).length}`);

    if (Object.keys(indexGroups).length > 60) {
      console.log('\n‚ö†Ô∏è  WARNING: ‡∏°‡∏µ indexes ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô 64 keys limit');
      
      // ‡∏´‡∏≤ indexes ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô:');
      Object.keys(indexGroups).forEach(keyName => {
        if (keyName.includes('ibfk') && keyName !== 'PRIMARY') {
          console.log(`  - ${keyName} (Foreign Key Index - ‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)`);
        }
      });
    }

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  } finally {
    await sequelize.close();
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  checkIndexes();
}

module.exports = checkIndexes;